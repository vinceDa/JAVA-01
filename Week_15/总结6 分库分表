一、分库分表
  1.主从复制
    5.6开始就是多线程，conditionor在分发策略中同一行的事务会给同一个worker，一个事务必须始终由一个worker完成
    mysql 主从复制核心原理：mysql主库写binlog 从库写relaylog

  2 mysql 读写分离
    2.1 读写分离用处 读写分离是为了提高业务处理能力 通过配置多个数据源的方式实现
    2.2 读写分离基础版本 基于spring boot根据service对数据的操作进行不同数据库的操作
    2.3 读写分离进阶版本 基于ShardingSphere-jdbc-5.0.0 实现读写分离配置
  3 mysql 高可用
    3.1 高可用的原因 在读写分离时，提升读的能力 在故障时，提供failover的能力
    3.2 mysql innodb cluster 提供了一套高可用的框架
  4 数据库拆分
    4.1 拆分原因
    主从结构解决了高可用，读扩展，但是单机容量并没有变化，单机写的性能无法解决，所以采用分库分表的形式从而降低单个节点的写压力。
    
    4.1 垂直拆分
    垂直拆分（拆库）就是将一个数据库，拆分成多个提供不同业务数据处理能力的数据库。
    垂直拆分（拆表）：如果单表数据量过大，还可能需要对单表进行拆分。
        4.1.1垂直拆分的优缺点
            优点：
            单库（单表）变小，便于管理和维护
            对性能和容量有提升作用
            改造后，系统和数据复杂度降低
            可以作为微服务改造的基础
            缺点：
            库变多，管理变复杂
            对业务系统有较强的侵入性
            改造过程复杂，容易出故障
            拆分到一定程度就无法继续拆分

    4.2 水平拆分
    水平拆分（按主键分库分表）：水平拆分就是直接对数据进行分片，有分库和分表两个具体方式，但是都只是降低单个节点数据量，但不改变数据本身的结构。这样对业务系统本身的代码逻辑来说，就不需要做特别大的改动，甚至可以基于一些中间件做到透明。
        4.2.1 水平拆分优缺点
            优点：
            解决容量问题
            比垂直拆分对系统影响小
            部分提升性能和稳定性

            缺点：
            集群规模大，管理复杂
            复杂 SQL 支持问题（业务侵入性、性能）
            数据迁移问题
            一致性问题
            
    5.数据迁移
      全量
      全量+增量
      binlog+全量+增量
      ShardingSphere-Scaling
      
    6.分布式事务
      6.1分布式事务 分布式条件下，多个节点操作的整体事务一致性。
      6.2常见设计思路
      理想状态：直接想单机数据库事务一样，多个数据库自动通过某种协调机制，实现了跨数据库节点的一致性。
      一般情况：可以容忍一段时间的数据不一致，最终通过超时终止，调度补偿，等等方式，实现数据的最终状态一致性。
      6.3事务
            6.3.1 xa事务
             基于强一致性的思路，就有了基于数据库本身支持的协议，XA 分布式事务。XA 整体设计思路可以概括为，如何在现有事务模型上微调扩展，实现分布式事务。
            

            6.3.2 base 柔性事务
                1柔性事务
                  基本可用（Basically Available）保证分布式事务参与方不一定同时在线。
                  柔性状态（Soft state）则允许系统状态更新有一定的延时，这个延时对客户来说不一定能够察觉。
                  最终一致性（Eventually consistent）通常是通过消息传递的方式保证系统的最终一致性。
                2柔性事务常见的设计模式
                  1）.tcc 通过手动补偿来处理
                  2）.at 通过自动补偿来处理

            6.3.3 tcc/at 及相关框架
               hmily
